// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl

/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];
    
    PARTS:
    Mux(a=a[0], b=b[0], sel=sel[0]  , out=abmux0);
    Mux(a=c[0], b=d[0], sel=sel[0]  , out=cdmux0);
    Mux(a=abmux0, b=cdmux0, sel=sel[1] , out=out[0]);
   
    Mux(a=a[1], b=b[1], sel=sel[0]  , out=abmux1);
    Mux(a=c[1], b=d[1], sel=sel[0]  , out=cdmux1);
    Mux(a=abmux1, b=cdmux1, sel=sel[1] , out=out[1]);

    Mux(a=a[2], b=b[2], sel=sel[0]  , out=abmux2);
    Mux(a=c[2], b=d[2], sel=sel[0]  , out=cdmux2);
    Mux(a=abmux2, b=cdmux2, sel=sel[1] , out=out[2]);

    Mux(a=a[3], b=b[3], sel=sel[0]  , out=abmux3);
    Mux(a=c[3], b=d[3], sel=sel[0]  , out=cdmux3);
    Mux(a=abmux3, b=cdmux3, sel=sel[1] , out=out[3]);

    Mux(a=a[4], b=b[4], sel=sel[0]  , out=abmux4);
    Mux(a=c[4], b=d[4], sel=sel[0]  , out=cdmux4);
    Mux(a=abmux4, b=cdmux4, sel=sel[1] , out=out[4]);

    Mux(a=a[5], b=b[5], sel=sel[0]  , out=abmux5);
    Mux(a=c[5], b=d[5], sel=sel[0]  , out=cdmux5);
    Mux(a=abmux5, b=cdmux5, sel=sel[1] , out=out[5]);

    Mux(a=a[6], b=b[6], sel=sel[0]  , out=abmux6);
    Mux(a=c[6], b=d[6], sel=sel[0]  , out=cdmux6);
    Mux(a=abmux6, b=cdmux6, sel=sel[1] , out=out[6]);

    Mux(a=a[7], b=b[7], sel=sel[0]  , out=abmux7);
    Mux(a=c[7], b=d[7], sel=sel[0]  , out=cdmux7);
    Mux(a=abmux7, b=cdmux7, sel=sel[1] , out=out[7]);

    Mux(a=a[8], b=b[8], sel=sel[0]  , out=abmux8);
    Mux(a=c[8], b=d[8], sel=sel[0]  , out=cdmux8);
    Mux(a=abmux8, b=cdmux8, sel=sel[1] , out=out[8]);

    Mux(a=a[9], b=b[9], sel=sel[0]  , out=abmux9);
    Mux(a=c[9], b=d[9], sel=sel[0]  , out=cdmux9);
    Mux(a=abmux9, b=cdmux9, sel=sel[1] , out=out[9]);

    Mux(a=a[10], b=b[10], sel=sel[0]  , out=abmux10);
    Mux(a=c[10], b=d[10], sel=sel[0]  , out=cdmux10);
    Mux(a=abmux10, b=cdmux10, sel=sel[1] , out=out[10]);

    Mux(a=a[11], b=b[11], sel=sel[0]  , out=abmux11);
    Mux(a=c[11], b=d[11], sel=sel[0]  , out=cdmux11);
    Mux(a=abmux11, b=cdmux11, sel=sel[1] , out=out[11]);

    Mux(a=a[12], b=b[12], sel=sel[0]  , out=abmux12);
    Mux(a=c[12], b=d[12], sel=sel[0]  , out=cdmux12);
    Mux(a=abmux12, b=cdmux12, sel=sel[1] , out=out[12]);

    Mux(a=a[13], b=b[13], sel=sel[0]  , out=abmux13);
    Mux(a=c[13], b=d[13], sel=sel[0]  , out=cdmux13);
    Mux(a=abmux13, b=cdmux13, sel=sel[1] , out=out[13]);

    Mux(a=a[14], b=b[14], sel=sel[0]  , out=abmux14);
    Mux(a=c[14], b=d[14], sel=sel[0]  , out=cdmux14);
    Mux(a=abmux14, b=cdmux14, sel=sel[1] , out=out[14]);

    Mux(a=a[15], b=b[15], sel=sel[0]  , out=abmux15);
    Mux(a=c[15], b=d[15], sel=sel[0]  , out=cdmux15);
    Mux(a=abmux15, b=cdmux15, sel=sel[1] , out=out[15]);
}
